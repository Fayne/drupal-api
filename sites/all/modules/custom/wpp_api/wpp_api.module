<?php

/**
 * Constant
 */
define('WPP_API_GALLERY_TYPE', 'gallery');

/**
 * Implements of hook_services_resources().
 */
function wpp_api_services_resources()
{
    $api = array(
        'gallery' => array(
            'operations' => array(
                'retrieve' => array(
                    'help' => 'Retrieves posted gallery',
                    'callback' => '_wpp_api_gallery_retrieve',
                    'access callback' => '_wpp_api_node_resource_access',
                    'access arguments' => array('view'),
                    'access arguments append' => TRUE,
                    'args' => array(
                        array(
                            'name' => 'nid',
                            'optional' => false,
                            'source' => array('path' => 0),
                            'type' => 'int',
                            'description' => 'The nid of the node to get',
                        ),
                    ),
                ),
                'index' => array(
                    'help' => 'list posted gallery',
                    'callback' => '_wpp_api_gallery_list',
                    'access callback' => '_wpp_api_node_resource_access',
                    'access arguments' => array('view'),
                    'args' => array(
                        array(
                            'name' => 'offset',
                            'type' => 'int',
                            'description' => 'Number of the offset',
                            'source' => array('param' => 'offset'),
                            'optional' => TRUE,
                            'default' => '0',
                        ),
                        array(
                            'name' => 'limit',
                            'type' => 'int',
                            'description' => 'Length of the array',
                            'source' => array('param' => 'limit'),
                            'optional' => TRUE,
                            'default' => '0',
                        ),
                    ),
                ),
            ),
        ),
        'beacon' => array(
            'operations' => array(
                'index' => array(
                    'help' => 'list beacons',
                    'callback' => '_wpp_api_beacon_list',
                    'access callback' => '_wpp_api_node_resource_access',
                    'access arguments' => array('view'),
                    'args' => array(),
                ),
            ),
        ),
    );

    return $api;
}

/**
 * Callback function for gallery retrieve
 * @param null $nid
 * @return array
 */
function _wpp_api_gallery_retrieve($nid = null)
{

    $gallery = node_load($nid);

    return _wpp_api_output_gallery($gallery);

}

/**
 * Callback function for gallery list
 *
 * @param $offset
 * @param $limit
 * @return array
 */
function _wpp_api_gallery_list($offset, $limit)
{
    $galleryList = node_load_multiple(array(), array('type' => 'article'));

    $galleryList = $limit ? array_slice($galleryList, $offset, $limit) : array_slice($galleryList, $offset);

    return _wpp_api_output_gallery_list($galleryList, $offset, $limit);
}

/**
 * Callback function for beacon list
 *
 * @return mixed
 */
function _wpp_api_beacon_list()
{
    $beaconList = node_load_multiple(array(), array('type' => 'beacon'));

    return _wpp_api_output_beacon_list($beaconList);
}

/**
 * Get gallery post
 * @param object $gallery
 * @return array
 */
function _wpp_api_output_gallery($gallery)
{
    $galleryAPI = new stdClass();

    $galleryAPI->id = (int)$gallery->nid;
    $galleryAPI->title = $gallery->title;
    $galleryAPI->subTitle = isset($gallery->field_subtitle[LANGUAGE_NONE][0]['value']) ? $gallery->field_subtitle[LANGUAGE_NONE][0]['value'] : '';
    $galleryAPI->description = isset($gallery->body[LANGUAGE_NONE][0]['value']) ? $gallery->body[LANGUAGE_NONE][0]['value'] : '';
    $galleryAPI->type = isset($gallery->field_type[LANGUAGE_NONE][0]['tid']) ? _get_term_name_by_id($gallery->field_type[LANGUAGE_NONE][0]['tid']) : '';
    $galleryAPI->thumbnail = isset($gallery->field_image[LANGUAGE_NONE][0]['uri']) ? file_create_url($gallery->field_image[LANGUAGE_NONE][0]['uri']) : '';
    $galleryAPI->cover = isset($gallery->field_cover[LANGUAGE_NONE][0]['uri']) ? file_create_url($gallery->field_cover[LANGUAGE_NONE][0]['uri']) : '';

    if ($video = isset($gallery->field_video[LANGUAGE_NONE][0]['uri']) ? file_create_url($gallery->field_video[LANGUAGE_NONE][0]['uri']) : '') {
        $galleryAPI->video = $video;
    }

    $galleryAPI->publishedAt = isset($gallery->field_published[LANGUAGE_NONE][0]['value']) ? $gallery->field_published[LANGUAGE_NONE][0]['value'] : '';
    $galleryAPI->updateAt = date(DATE_ISO8601, $gallery->changed);

    return $galleryAPI;
}

/**
 * Get gallery posts
 * @param array $galleryList
 * @return array
 */
function _wpp_api_output_gallery_list($galleryList = array())
{
    $galleryListAPI = array();

    foreach ($galleryList as $gallery) {
        $galleryAPI = new stdClass();

        $galleryAPI->id = (int)$gallery->nid;
        $galleryAPI->title = $gallery->title;
        $galleryAPI->subTitle = isset($gallery->field_subtitle[LANGUAGE_NONE][0]['value']) ? $gallery->field_subtitle[LANGUAGE_NONE][0]['value'] : '';
        $galleryAPI->description = isset($gallery->body[LANGUAGE_NONE][0]['value']) ? $gallery->body[LANGUAGE_NONE][0]['value'] : '';
        $galleryAPI->type = isset($gallery->field_type[LANGUAGE_NONE][0]['tid']) ? _get_term_name_by_id($gallery->field_type[LANGUAGE_NONE][0]['tid']) : '';
        $galleryAPI->thumbnail = isset($gallery->field_image[LANGUAGE_NONE][0]['uri']) ? file_create_url($gallery->field_image[LANGUAGE_NONE][0]['uri']) : '';
        $galleryAPI->cover = isset($gallery->field_cover[LANGUAGE_NONE][0]['uri']) ? file_create_url($gallery->field_cover[LANGUAGE_NONE][0]['uri']) : '';

        if ($video = isset($gallery->field_video[LANGUAGE_NONE][0]['uri']) ? file_create_url($gallery->field_video[LANGUAGE_NONE][0]['uri']) : '') {
            $galleryAPI->video = $video;
        }

        $galleryAPI->publishedAt = isset($gallery->field_published[LANGUAGE_NONE][0]['value']) ? $gallery->field_published[LANGUAGE_NONE][0]['value'] : '';
        $galleryAPI->updateAt = date(DATE_ISO8601, $gallery->changed);

        array_push($galleryListAPI, $galleryAPI);
    }

    return $galleryListAPI;
}

/**
 * Get beacon list
 *
 * @param array $beaconList
 * @return array
 */
function _wpp_api_output_beacon_list($beaconList = array())
{
    $beaconListAPI = array();

    foreach ($beaconList as $beacon) {
        $beaconAPI = new stdClass();

        $beaconAPI->uuid = $beacon->field_uuid[LANGUAGE_NONE][0]['value'];
        $beaconAPI->name = $beacon->title;
        $beaconAPI->major = $beacon->field_major[LANGUAGE_NONE][0]['value'];
        $beaconAPI->minor = $beacon->field_minor[LANGUAGE_NONE][0]['value'];
        $beaconAPI->distance = $beacon->field_distance[LANGUAGE_NONE][0]['value'];

        // check whether it has reference content
        if ($contentId = isset($beacon->field_beacon_content[LANGUAGE_NONE][0]['target_id']) ? $beacon->field_beacon_content[LANGUAGE_NONE][0]['target_id'] : '') {
            global $base_url;

            // get the current endpoint path
            $endpoints = services_endpoint_load_all();
            $currentPath = '';

            foreach ($endpoints as $endpoint) {
                if (strpos(current_path(), $endpoint->path) === 0) {
                    $currentPath = $endpoint->path;

                    break;
                }
            }

//            $content = node_load($contentId);

            $beaconAPI->content = array(
                'id' => $contentId,
                'type' => WPP_API_GALLERY_TYPE,
                'href' => $currentPath ? $base_url . '/' . $currentPath . '/' . WPP_API_GALLERY_TYPE . '/' . $contentId : "",
            );
        }

        $beaconAPI->updateAt = date(DATE_ISO8601, $beacon->changed);

        array_push($beaconListAPI, $beaconAPI);
    }

    return $beaconListAPI;
}

/**
 * Determine whether the current user can access a node resource.
 *
 * @param $op
 *   One of view, update, create, delete per node_access().
 * @param $args
 *   Resource arguments passed through from the original request.
 * @return bool
 *
 * @see node_access()
 */
function _wpp_api_node_resource_access($op = 'view', $args = array())
{
    return true;
}

/**
 * Get term name by given tid
 *
 * @param int $tid
 * @return string mixed
 */
function _get_term_name_by_id($tid)
{
    $taxonomyTerm = taxonomy_term_load($tid);

    return $taxonomyTerm->name;
}