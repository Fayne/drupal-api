<?php

/**
 * Constant
 */
define('WPP_API_GALLERY_TYPE', 'gallery');

/**
 * Implements of hook_services_resources().
 */
function wpp_api_services_resources() {
    $api = array(
        'gallery' => array(
            'operations' => array(
                'retrieve' => array(
                    'help' => 'Retrieve posted gallery',
                    'file' => array(
                        'type' => 'inc',
                        'module' => 'wpp_api',
                        'name' => 'wpp_api'
                    ),
                    'callback' => '_wpp_api_gallery_retrieve',
                    'access callback' => '_wpp_api_node_resource_access',
                    'access arguments' => array('view'),
                    'access arguments append' => TRUE,
                    'args' => array(
                        array(
                            'name' => 'nid',
                            'optional' => FALSE,
                            'source' => array('path' => 0),
                            'type' => 'int',
                            'description' => 'The nid of the node to get',
                        ),
                    ),
                ),
                'index' => array(
                    'help' => 'List posted gallery',
                    'file' => array(
                        'type' => 'inc',
                        'module' => 'wpp_api',
                        'name' => 'wpp_api'
                    ),
                    'callback' => '_wpp_api_gallery_list',
                    'access callback' => '_wpp_api_node_resource_access',
                    'access arguments' => array('view'),
                    'args' => array(
                        array(
                            'name' => 'offset',
                            'type' => 'int',
                            'description' => 'Number of the offset',
                            'source' => array('param' => 'offset'),
                            'optional' => TRUE,
                            'default' => '0',
                        ),
                        array(
                            'name' => 'limit',
                            'type' => 'int',
                            'description' => 'Length of the array',
                            'source' => array('param' => 'limit'),
                            'optional' => TRUE,
                            'default' => '0',
                        ),
                        array(
                            'name' => 'detail',
                            'type' => 'string',
                            'description' => 'If true, display extra fields',
                            'source' => array('param' => 'detail'),
                            'optional' => TRUE,
                            'default' => 'false',
                        )
                    ),
                ),
            ),
        ),
        'beacon' => array(
            'operations' => array(
                'index' => array(
                    'help' => 'list beacons',
                    'file' => array(
                        'type' => 'inc',
                        'module' => 'wpp_api',
                        'name' => 'wpp_api'
                    ),
                    'callback' => '_wpp_api_beacon_list',
                    'access callback' => '_wpp_api_node_resource_access',
                    'access arguments' => array('view'),
                    'args' => array(),
                ),
            ),
        ),
        'floor' => array(
            'operations' => array(
                'retrieve' => array(
                    'help' => 'Retrieve floor',
                    'file' => array(
                        'type' => 'inc',
                        'module' => 'wpp_api',
                        'name' => 'wpp_api'
                    ),
                    'callback' => '_wpp_api_floor_retrieve',
                    'access callback' => '_wpp_api_node_resource_access',
                    'access arguments' => array('view'),
                    'access arguments append' => TRUE,
                    'args' => array(
                        array(
                            'name' => 'floorNumber',
                            'optional' => FALSE,
                            'source' => array('path' => 0),
                            'type' => 'int',
                            'description' => 'The floor number',
                        ),
                    ),
                ),
            ),
            'index' => array(
                'help' => 'List floors',
                'file' => array(
                    'type' => 'inc',
                    'module' => 'wpp_api',
                    'name' => 'wpp_api'
                ),
                'callback' => '_wpp_api_floor_list',
                'access callback' => '_wpp_api_node_resource_access',
                'access arguments' => array('view'),
                'args' => array(
                    array(
                        'name' => 'offset',
                        'type' => 'int',
                        'description' => 'Number of the offset',
                        'source' => array('param' => 'offset'),
                        'optional' => TRUE,
                        'default' => '0',
                    ),
                    array(
                        'name' => 'limit',
                        'type' => 'int',
                        'description' => 'Length of the array',
                        'source' => array('param' => 'limit'),
                        'optional' => TRUE,
                        'default' => '0',
                    ),
                ),
            ),
        ),
        'deal' => array(
            'operations' => array(
                'retrieve' => array(
                    'help' => 'Retrieve Deal',
                    'file' => array(
                        'type' => 'inc',
                        'module' => 'wpp_api',
                        'name' => 'wpp_api'
                    ),
                    'callback' => '_wpp_api_deal_retrieve',
                    'access callback' => '_wpp_api_node_resource_access',
                    'access arguments' => array('view'),
                    'access arguments append' => TRUE,
                    'args' => array(
                        array(
                            'name' => 'nid',
                            'optional' => FALSE,
                            'source' => array('path' => 0),
                            'type' => 'int',
                            'description' => 'The deal number',
                        ),
                    ),
                ),
            ),
            'index' => array(
                'help' => 'List deals',
                'file' => array(
                    'type' => 'inc',
                    'module' => 'wpp_api',
                    'name' => 'wpp_api'
                ),
                'callback' => '_wpp_api_deal_list',
                'access callback' => '_wpp_api_node_resource_access',
                'access arguments' => array('view'),
                'args' => array(
                    array(
                        'name' => 'offset',
                        'type' => 'int',
                        'description' => 'Number of the offset',
                        'source' => array('param' => 'offset'),
                        'optional' => TRUE,
                        'default' => '0',
                    ),
                    array(
                        'name' => 'limit',
                        'type' => 'int',
                        'description' => 'Length of the array',
                        'source' => array('param' => 'limit'),
                        'optional' => TRUE,
                        'default' => '0',
                    ),
                ),
            ),
        ),
        'feedback' => array(
            'operations' => array(
                'create' => array(
                    'help' => 'Submit a user feedback',
                    'file' => array(
                        'type' => 'inc',
                        'module' => 'wpp_api',
                        'name' => 'wpp_api'
                    ),
                    'callback' => '_wpp_api_user_feedback',
                    'access callback' => '_wpp_api_node_resource_access',
                    'access arguments' => array('create'),
                    'access arguments append' => TRUE,
                    'args' => array(
                        array(
                            'name' => 'email',
                            'optional' => FALSE,
                            'source' => 'data',
                            'type' => 'string',
                            'description' => 'The user email address',
                        ),
                        array(
                            'name' => 'name',
                            'optional' => FALSE,
                            'source' => 'data',
                            'type' => 'string',
                            'description' => 'The user full name',
                        ),
                        array(
                            'name' => 'message',
                            'optional' => FALSE,
                            'source' => 'data',
                            'type' => 'string',
                            'description' => 'The user submitted feedback message',
                        ),
                    ),
                ),
            ),
        ),
    );

    return $api;
}

/**
 * Implements hook_node_validate().
 */
function wpp_api_node_validate($node, $form, &$form_state) {
    $result = _wpp_api_get_existed_floor_by_floor_number($node);

    if (isset($result['node']) && $node->status === NODE_PUBLISHED) {
        $existed = current($result['node']);

        if (empty($node->nid) || ($node->nid && $node->nid != $existed->nid)) {
            form_set_error('field_floor_number', t('The information of this floor has existed. Please <strong>UNPUBLISH</strong> or <strong>DELETE</strong> old version first.'));
        }
    }
}

/**
 * Implements hook_node_update().
 */
function wpp_api_node_update($node) {
    $result = _wpp_api_get_existed_floor_by_floor_number($node);

    if (isset($result['node']) && count($result['node']) > 1) {

        if ((int) $node->original->status === NODE_NOT_PUBLISHED && (int) $node->status === NODE_PUBLISHED) {
            $node->status = NODE_NOT_PUBLISHED;

            node_save($node);
        }

        drupal_get_messages();

        drupal_set_message(t('There are more than one record existed in the same floor. Please <strong>UNPUBLISH</strong> or <strong>DELETE</strong> old version first.'), 'error');
    }
}

/**
 * Get existed floor information.
 *
 * @param $node
 * @return bool|mixed
 */
function _wpp_api_get_existed_floor_by_floor_number($node) {
    if ($node->type == 'floor') {
        $floorNumber = $node->field_floor_number[LANGUAGE_NONE][0]['value'];

        $query = new EntityFieldQuery();
        $query
            ->entityCondition('entity_type', 'node')
            ->entityCondition('bundle', 'floor')
            ->propertyCondition('status', NODE_PUBLISHED)
            ->fieldCondition('field_floor_number', 'value', $floorNumber);

        $result = $query->execute();

        return $result;
    }

    return FALSE;
}